services:
  redis:
    image: redis:${OPENCTI_REDIS_VERSION}
    restart: always
    mem_limit: 8192m
    command:
      - bash
      - -c
      # - redis-server --appendonly yes --appendfsync no --maxmemory 8000000000 --maxmemory-policy allkeys-lru
      - redis-server --maxmemory 8000000000 --maxmemory-policy allkeys-lru
      - redis-server config set client-output-buffer-limit "slave 836870912 836870912 0"
    volumes:
      - redisdata:/data
    networks:
      - opencti-network   
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_STACK_VERSION}
    mem_limit: 8448m
    volumes:
      - esdata:/usr/share/elasticsearch/data
      - esbackup:/usr/share/elasticsearch/backup
    environment:
      # Comment-out the line below for a cluster of multiple nodes
      - discovery.type=single-node
      # Uncomment the line below below for a cluster of multiple nodes
      # - cluster.name=docker-cluster
      - network.host=0.0.0.0
      - xpack.ml.enabled=false
      - xpack.security.enabled=false
      - thread_pool.search.queue_size=5000
      - logger.org.elasticsearch.discovery="ERROR"
      - "ES_JAVA_OPTS=-Xms${ELASTIC_MEMORY_SIZE} -Xmx${ELASTIC_MEMORY_SIZE}"
    networks:
      - opencti-network
    ports:
      - "9200:9200"
    restart: always
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50
  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_STACK_VERSION}
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    restart: unless-stopped
    networks:
      - opencti-network
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
  minio:
    image: minio/minio:${MINIO_VERSION}
    volumes:
      - s3data:/data
    networks:
      - opencti-network
    ports:
      - "9000:9000"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}    
    command: server /data
    restart: always
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 3
  rabbitmq:
    image: rabbitmq:${RABBITMQ_VERSION}
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_NODENAME=rabbit01@localhost
      - RABBITMQ_COSUMER_TIMEOUT=36000000
    volumes:
      - amqpdata:/var/lib/rabbitmq
    restart: always
    networks:
      - opencti-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
## START FRONTEND CONFIG
  opencti-frontend:
    image: opencti/platform:${OPENCTI_VERSION} 
    environment:
      - NODE_OPTIONS=--max-old-space-size=8192
      - APP__PORT=8080
      - APP__BASE_URL=http://localhost #${OPENCTI_BASE_FRONTEND_URL}
      - APP__ADMIN__EMAIL=${OPENCTI_ADMIN_EMAIL}
      - APP__ADMIN__PASSWORD=${OPENCTI_ADMIN_PASSWORD}
      - APP__ADMIN__TOKEN=${OPENCTI_ADMIN_TOKEN}
      - APP__SESSION_TIMEOUT=3600000
      - APP__HEALTH_ACCESS_KEY=${HEATLH_ACCESS_TOKEN}
      - APP__APP_LOGS__LOGS_LEVEL=error
      - RULE_ENGINE__ENABLED=false
      - HISTORY_MANAGER__ENABLED=false
      - TASK_SCHEDULER__ENABLED=false
      - SYNC_MANAGER__ENABLED=false
      - EXPIRATION_SCHEDULER__ENABLED=false
      - RETENTION_MANAGER__ENABLED=false
      - NOTIFICATION_MANAGER__ENABLED=false
      - PUBLISHER_MANAGER__ENABLED=false
      - INGESTION_MANAGER__ENABLED=false
      - PLAYBOOK_MANAGER__ENABLED=false
      - ACTIVITY_MANAGER__ENABLED=false
      - CONNECTOR_MANAGER__ENABLED=false
      - IMPORT_CSV_BUILT_IN_CONNECTOR__ENABLED=false
      - FILE_INDEX_MANAGER__ENABLED=false
      - INDICATOR_DECAY_MANAGER__ENABLED=false
      - GARBAGE_COLLECTION_MANAGER__ENABLED=false
      - AI__ENABLED=true
      - AI__TYPE=mistralai
      ##- AI__TOKEN=none 
      - AI__TOKEN=${OPENCTI_AI_TOKEN}
      - AI__ENDPOINT=http://10.0.30.66:11434
      ## - AI__TOKEN=${OPENAI_TOKEN}
      ## - AI__MODEL=qwen2.5:7b
      - AI__MODEL=mistral:instruct
      - REDIS__HOSTNAME=redis
      - REDIS__PORT=6379
      - REDIS__TRIMMING=500000
      - ELASTICSEARCH__URL=http://elasticsearch:9200
      - MINIO__ENDPOINT=minio
      - MINIO__PORT=9000
      - MINIO__USE_SSL=false
      - MINIO__ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO__SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - RABBITMQ__HOSTNAME=rabbitmq
      - RABBITMQ__PORT=5672
      - RABBITMQ__PORT_MANAGEMENT=15672
      - RABBITMQ__MANAGEMENT_SSL=false
      - RABBITMQ__USERNAME=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ__PASSWORD=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ__QUEUE_TYPE="quorum"      
      - SMTP__HOSTNAME=${SMTP_HOSTNAME}
      - SMTP__PORT=25
      - PROVIDERS__LOCAL__STRATEGY=LocalStrategy
      - APP__HEALTH_ACCESS_KEY=${OPENCTI_HEALTHCHECK_ACCESS_KEY}
      - XTM__OPENBAS_URL=http://10.0.30.36:8080
      - XTM__OPENBAS_TOKEN=${OPEN_BAS_TOKEN}
    networks:
      - opencti-network
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      opencti-backend:
        condition: service_healthy
    restart: always
    healthcheck:
      test:  ["CMD", "wget", "-qO-", "http://opencti-frontend:8080/health?health_access_key=${OPENCTI_HEALTHCHECK_ACCESS_KEY}"]
      interval: 10s
      timeout: 5s
      retries: 20
## END FRONTEND CONFIG

## START BACKEND CONFIG
  opencti-backend:
    image: opencti/platform:${OPENCTI_VERSION} 
    environment:
      - NODE_OPTIONS=--max-old-space-size=8192
      - APP__PORT=8082
      - APP__BASE_URL=${OPENCTI_BASE_BACKEND_URL}
      - APP__ADMIN__EMAIL=${OPENCTI_ADMIN_EMAIL}
      - APP__ADMIN__PASSWORD=${OPENCTI_ADMIN_PASSWORD}
      - APP__ADMIN__TOKEN=${OPENCTI_ADMIN_TOKEN}
      - APP__REQUEST_TIMEOUT=1200000
      - APP__HEALTH_ACCESS_KEY=${HEATLH_ACCESS_TOKEN}
      - APP__APP_LOGS__LOGS_LEVEL=error
      - REDIS__HOSTNAME=redis
      - REDIS__PORT=6379
      - REDIS__TRIMMING=500000
      - ELASTICSEARCH__URL=http://elasticsearch:9200
      - MINIO__ENDPOINT=minio
      - MINIO__PORT=9000
      - MINIO__USE_SSL=false
      - MINIO__ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO__SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - RABBITMQ__HOSTNAME=rabbitmq
      - RABBITMQ__PORT=5672
      - RABBITMQ__PORT_MANAGEMENT=15672
      - RABBITMQ__MANAGEMENT_SSL=false
      - RABBITMQ__USERNAME=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ__PASSWORD=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ__QUEUE_TYPE="quorum"      
      - SMTP__HOSTNAME=${SMTP_HOSTNAME}
      - SMTP__PORT=25
      - PROVIDERS__LOCAL__STRATEGY=LocalStrategy
      - APP__HEALTH_ACCESS_KEY=${OPENCTI_HEALTHCHECK_ACCESS_KEY}
    networks:
      - opencti-network
    ports:
      - "8082:8082"
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    healthcheck:
      test:  ["CMD", "wget", "-qO-", "http://opencti-backend:8082/health?health_access_key=${OPENCTI_HEALTHCHECK_ACCESS_KEY}"]
      interval: 10s
      timeout: 5s
      retries: 20
## END BACKEND CONFIG

## START WORKER AND CONNECTOR CONFIGURATION
  worker:
    image: opencti/worker:${OPENCTI_VERSION} 
    environment:
      - OPENCTI_URL=${OPENCTI_BASE_BACKEND_URL}
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN}
      - WORKER_LOG_LEVEL=info
    networks:
      - opencti-network
    depends_on:
      opencti-backend:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 4
    restart: always
  connector-export-file-stix:
    image: opencti/connector-export-file-stix:${OPENCTI_VERSION} 
    environment:
      - OPENCTI_URL=${OPENCTI_BASE_BACKEND_URL}
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN}
      - CONNECTOR_ID=${CONNECTOR_EXPORT_FILE_STIX_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=INTERNAL_EXPORT_FILE
      - CONNECTOR_NAME=ExportFileStix2
      - CONNECTOR_SCOPE=application/json
      - CONNECTOR_CONFIDENCE_LEVEL=15 # From 0 (Unknown) to 100 (Fully trusted)
      - CONNECTOR_LOG_LEVEL=info
    networks:
      - opencti-network
    restart: always
    depends_on:
      opencti-backend:
        condition: service_healthy
  connector-export-file-csv:
    image: opencti/connector-export-file-csv:${OPENCTI_VERSION} 
    environment:
      - OPENCTI_URL=${OPENCTI_BASE_BACKEND_URL}
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN}
      - CONNECTOR_ID=${CONNECTOR_EXPORT_FILE_CSV_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=INTERNAL_EXPORT_FILE
      - CONNECTOR_NAME=ExportFileCsv
      - CONNECTOR_SCOPE=text/csv
      - CONNECTOR_CONFIDENCE_LEVEL=15 # From 0 (Unknown) to 100 (Fully trusted)
      - CONNECTOR_LOG_LEVEL=info
    networks:
      - opencti-network
    depends_on:
      opencti-backend:
        condition: service_healthy
    restart: always
  connector-export-file-txt:
    image: opencti/connector-export-file-txt:${OPENCTI_VERSION} 
    environment:
      - OPENCTI_URL=${OPENCTI_BASE_BACKEND_URL}
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN}
      - CONNECTOR_ID=${CONNECTOR_EXPORT_FILE_TXT_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=INTERNAL_EXPORT_FILE
      - CONNECTOR_NAME=ExportFileTxt
      - CONNECTOR_SCOPE=text/plain
      - CONNECTOR_CONFIDENCE_LEVEL=15 # From 0 (Unknown) to 100 (Fully trusted)
      - CONNECTOR_LOG_LEVEL=info
    restart: always
    networks:
      - opencti-network
    depends_on:
      opencti-backend:
        condition: service_healthy
  connector-import-file-stix:
    image: opencti/connector-import-file-stix:${OPENCTI_VERSION} 
    environment:
      - OPENCTI_URL=${OPENCTI_BASE_BACKEND_URL}
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN}
      - CONNECTOR_ID=${CONNECTOR_IMPORT_FILE_STIX_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=INTERNAL_IMPORT_FILE
      - CONNECTOR_NAME=ImportFileStix
      - CONNECTOR_VALIDATE_BEFORE_IMPORT=true # Validate any bundle before import
      - CONNECTOR_SCOPE=application/json,text/xml
      - CONNECTOR_AUTO=true # Enable/disable auto-import of file
      - CONNECTOR_CONFIDENCE_LEVEL=15 # From 0 (Unknown) to 100 (Fully trusted)
      - CONNECTOR_LOG_LEVEL=info
    restart: always
    networks:
      - opencti-network
    depends_on:
      opencti-backend:
        condition: service_healthy
  connector-import-document:
    image: opencti/connector-import-document:${OPENCTI_VERSION} 
    environment:
      - OPENCTI_URL=${OPENCTI_BASE_BACKEND_URL}
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN}
      - CONNECTOR_ID=${CONNECTOR_IMPORT_DOCUMENT_ID} # Valid UUIDv4
      - CONNECTOR_TYPE=INTERNAL_IMPORT_FILE
      - CONNECTOR_NAME=ImportDocument
      - CONNECTOR_VALIDATE_BEFORE_IMPORT=true # Validate any bundle before import
      - CONNECTOR_SCOPE=application/pdf,text/plain,text/html
      - CONNECTOR_AUTO=true # Enable/disable auto-import of file
      - CONNECTOR_ONLY_CONTEXTUAL=false # Only extract data related to an entity (a report, a threat actor, etc.)
      - CONNECTOR_CONFIDENCE_LEVEL=15 # From 0 (Unknown) to 100 (Fully trusted)
      - CONNECTOR_LOG_LEVEL=info
      - IMPORT_DOCUMENT_CREATE_INDICATOR=true
    restart: always
    networks:
      - opencti-network 
    depends_on:
      opencti-backend:
        condition: service_healthy

# # VOLUMES

volumes:
  esdata:
  esbackup:
  kibanadata:
  s3data:
  redisdata:
  amqpdata:

networks:
  opencti-network:
    driver: bridge
